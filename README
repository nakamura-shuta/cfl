# cfl (Copy For LLM)

A library and CLI tool to copy file contents for LLM processing. This tool helps you prepare code for LLM analysis by copying files with proper formatting and contextual information.

## Features

- Copy multiple files with proper markdown code block formatting
- Support for include/exclude patterns
- Respect .gitignore rules
- Display file statistics (size and token count)
- Show directory structure
- Support for multiple paths
- Flexible pattern matching for file selection
- Built-in token counting

## Installation

### As a CLI Tool

Using Homebrew (macOS):
```bash
brew tap nakamura-shuta/tap
brew install cfl
```

Using Cargo:
```bash
cargo install --git https://github.com/nakamura-shuta/cfl.git
```

### As a Library

Add to your `Cargo.toml`:
```toml
[dependencies]
cfl = { git = "https://github.com/nakamura-shuta/cfl" }
```

## Usage

### CLI Usage

#### Basic Commands

Copy all files in the current directory:
```bash
cfl .
```

Copy specific files or directories:
```bash
cfl src/main.rs
cfl src/,tests/
```

#### File Filtering

Include specific file patterns:
```bash
# Copy only Rust files
cfl . -i "*.rs"

# Copy both Rust and TOML files
cfl . -i "*.rs,*.toml"
```

Exclude specific file patterns:
```bash
# Copy all files except JSON files
cfl . -e "*.json"

# Copy all files except test files
cfl . -e "*_test.rs,test_*.rs"
```

Combine include and exclude patterns:
```bash
# Copy only Rust files, but exclude test files
cfl . -i "*.rs" -e "*_test.rs"
```

#### Preview Mode

Show which files would be copied without actually copying:
```bash
cfl -s .
```

#### Output Format

The copied content will be formatted as follows:
````
```path/to/file.rs
// File contents here
```
````

The command also displays useful information:
```
✨ Successfully copied 3 files to clipboard:
📁 Files:
  • src/main.rs (2,345 bytes, 456 tokens)
  • src/lib.rs (1,234 bytes, 234 tokens)
  • src/cli.rs (567 bytes, 89 tokens)

📊 Summary:
  📂 Total files: 3
  📦 Total size: 4,146 bytes
  🔤 Total tokens: 779

📁 Directory Structure:
└── src/
  └── main.rs
  └── lib.rs
  └── cli.rs
```

### Library Usage

#### Basic Usage

Simple file copying:
```rust
use cfl::{Result, copy_files};

fn main() -> Result<()> {
    // Copy all files in a directory
    let content = copy_files("src/")?;
    println!("Copied content:\n{}", content);
    Ok(())
}
```

Using the builder pattern for more control:
```rust
use cfl::{CflBuilder, Result};
use std::path::Path;

fn main() -> Result<()> {
    let mut processor = CflBuilder::new()
        .include_patterns("*.rs")
        .exclude_patterns("*_test.rs")
        .current_dir(Path::new("src/"))
        .build()?;

    processor.process_path(Path::new("src/"))?;
    
    // Get processed files information
    for file in processor.get_target_files() {
        println!("File: {} (size: {}, tokens: {})", 
            file.path, file.size, file.tokens);
    }

    // Get directory structure
    println!("Structure:\n{}", processor.get_directory_structure()?);

    Ok(())
}
```

#### Advanced Usage

Processing multiple directories with different patterns:
```rust
use cfl::{CflBuilder, Result};

fn main() -> Result<()> {
    // Process Rust files
    let mut rust_processor = CflBuilder::new()
        .include_patterns("*.rs")
        .exclude_patterns("*_test.rs")
        .build()?;

    rust_processor.process_path("src/")?;
    println!("Rust files tokens: {}", rust_processor.get_total_tokens());

    // Process configuration files
    let mut config_processor = CflBuilder::new()
        .include_patterns("*.toml,*.json")
        .build()?;

    config_processor.process_path(".")?;
    println!("Config files size: {}", config_processor.get_total_size());

    Ok(())
}
```

#### Available Methods

The `FileProcessor` struct provides several useful methods:

| Method | Description |
|--------|-------------|
| `get_target_files()` | Get information about processed files |
| `get_result()` | Get the formatted content string |
| `get_total_size()` | Get total size of processed files |
| `get_total_tokens()` | Get total token count |
| `get_directory_structure()` | Get formatted directory structure |

#### Running Examples

The repository includes example code that you can run:
```bash
# Run basic usage example
cargo run --example basic

# Run advanced usage example
cargo run --example advanced
```

## Options

| Option | Short | Description |
|--------|-------|-------------|
| --include | -i | Include only files matching these patterns (comma-separated) |
| --exclude | -e | Exclude files matching these patterns (comma-separated) |
| --show | -s | Show which files would be copied without copying |
| --help | -h | Show help message |
| --version | -V | Show version information |

## .gitignore Support

cfl automatically respects your project's .gitignore rules, ensuring that:
- Generated files are not included
- Build artifacts are ignored
- Node modules and other dependency directories are skipped

## Error Handling

The library uses `anyhow` and `thiserror` for robust error handling:
```rust
use cfl::{Result, CflError};

fn process() -> Result<()> {
    // Handle various error types
    match operation() {
        Err(CflError::PathNotFound(path)) => println!("Path not found: {}", path),
        Err(CflError::Pattern(err)) => println!("Invalid pattern: {}", err),
        Err(CflError::Clipboard(err)) => println!("Clipboard error: {}", err),
        Ok(_) => println!("Success!"),
    }
    Ok(())
}
```

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the LICENSE file for details.
